#!/bin/bash

# Very Minimal Static Site Generator

#   Features:
#  		- blog -n --new to compose a new draft
# 		- blog -b --build to build the blog at any time
# 		that's it; that's all I plan


PAGE_URL="https://julianorchard.co.uk"
SITE_TITLE=" | Julian Orchard"


# Help Function
 help () {
    echo ""
    echo "Usage of this tiny static site generator:"
    echo " -n / --new         create a new post"
    echo " -b / --build     build the full site"
 }


# Write A New Post
  new_post () {
		# Get Title
      read -p "Please give your page a title: " file_title
		# Get File Name from Title
			file_name=$(echo ${file_title,,} | sed -r 's/[[:punct:]]*//g;s/\.markdown//g' | sed -r 's/ /-/g')
			#	Check user is happy with the title, and if not, allow them to input a different file name
				read -p "Are you happy with this file being called $file_name.markdown? (Y/n) " file_name_confirm
				match=" |'"
				while [[ $file_name =~ $match ]] || [[ "$file_name_confirm" = "n" ]] || [[ "$file_name_confirm" = "no" ]] ; do
					read -p "Please enter the file name you want (cannot contain spaces): " file_name
					file_name_confirm="yes"
				done
				file_name=$(echo ${file_name,,} | sed -r 's/\.markdown//g')
				echo "Your file will be $file_name.markdown."
		# Get Description
			read -p "Please give your page a description: " file_description
		# Get Date
			printf -v file_date '%(%Y/%m/%d)T\n' -1
		# Static Page or Not
			read -p "Do you want this to be a post? (Y/n) " page_or_post

		# Print to File
			if [[ "$page_or_post" == "n" ]] || [[ "$page_or_post" == "no" ]]; then
				printf "<!--\npage_title: $file_title\npage_description: $file_description\npage_status: draft\n-->">content/$file_name.markdown
			else
				printf "<!--\npage_title: $file_title\npage_description: $file_description\npage_status: draft\npage_date: $file_date-->">content/$file_name.markdown
			fi
  }


	build_file() {
			page_url_full="$PAGE_URL/$1"
		# Create File
			echo "" > $1index.html
			# Using + as the divider, because I'm using / in the page_url
			sed "s+PAGE_TITLE+$2$SITE_TITLE+g;s+PAGE_DESCRIPTION+$3+g;s+PAGE_URL+$page_url_full+g" src/head.html >> $1index.html
			file_head=$(awk '/page_head/ {print $2}' $4)
			if [ ! -z $file_head ] && [ "$file_head"="large" ] ; then
				echo "<article id=\"expanded\">">>$1index.html
			else
				echo "<article id=\"regular\">">>$1index.html
			fi
			pandoc -f markdown $4 >> $1index.html
			echo "</article>">>$1index.html
			cat src/foot.html >> $1index.html
			return
	}


# Build Every Page on Site
  build_site () {
	# Clear src/list.html
	echo "<ul class=\"post-list\">">src/list.html
	# Loop Through Draft Folder, Checking If 'Published'
		for file in content/*.markdown; do
			if grep -iq "page_status: published" "$file"; then
					new_file=$(echo $file | sed -r "s/.+\/(.+)\..+/\1/")
					file_title=$(grep "page_title:" $file | cut -f 2- -d ' ')
					file_description=$(grep "page_description:" $file | cut -f 2- -d ' ')
				# Adjust whether page_date is present
						if grep -q "page_date" $file ; then
							file_date=$(awk '/page_date/ {print $2}' $file)
							new_file="posts/$file_date/$new_file/"
							mkdir -p $new_file
							echo "<li><a href=\"/${new_file}index.html\">$file_title</a> <div>$file_date</div></li>">>src/list.html
						# If Index File
						elif [ $new_file == "index" ] ; then
							new_file=""
						# Otherwise it's a static page
						else
							mkdir -p $new_file
							new_file="$new_file/"
						fi
				# Build the File
						[ ! -z $new_file ] && echo "Building: $new_file" || echo "Building: index.html"
						build_file "${new_file}" "${file_title}" "${file_description}" "${file}"
				# Add pages with page_list to array to finish later
						grep -q "page_list" ${new_file}index.html && rebuild_list+=("${new_file}")
			fi
		done
		echo "</ul>">>src/list.html
	# Ammend Pages Needing src/list.html
		for i in ${rebuild_list[@]}; do
			echo $(awk -v page_list="page_list" -v list_file="$(<src/list.html)" '
				{gsub(page_list,list_file); print }
			' ${i}index.html)>${i}index.html
		done
	}


# Confirm Necessary Packages are Installed
	if ! command -v pandoc -v &>/dev/null ; then
		echo "Pandoc needs to be installed for this script to work"
		exit 1
	fi
# Handle Flag Input
	case "$1" in
		-h|--help) 			help ;;
		-n|--new) 			new_post ;;
		-b|--build) 		build_site ;;
		*) help ;;
	esac
